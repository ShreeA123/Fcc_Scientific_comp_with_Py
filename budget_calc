class Category:

    def __init__(self, category):
        self.category = category
        self.ledger = []

    def deposit(self, amount, description=''):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description=''):
        if self.check_funds(amount):
            self.ledger.append({"amount": -amount, "description": description})
            return True
        return False

    def get_balance(self):
        return sum(item['amount'] for item in self.ledger)

    def transfer(self, amount, category):
        if self.check_funds(amount):
            self.withdraw(amount, "Transfer to " + category.category)
            category.deposit(amount, "Transfer from " + self.category)
            return True
        return False

    def check_funds(self, amount):
        return amount <= self.get_balance()

    def __str__(self):
        output = self.category.center(30, '*') + "\n"
        for item in self.ledger:
            output += f"{item['description'][:23].ljust(23)}{item['amount']:>7.2f}\n"
        output += f"Total: {self.get_balance():.2f}"
        return output
def create_spend_chart(categories):
    spent = [sum(item['amount'] for item in cat.ledger if item['amount'] < 0) for cat in categories]
    total_spent = sum(spent)
    spent_percent = [int((s / total_spent) * 10) * 10 for s in spent]

    chart = "Percentage spent by category\n"

    for i in range(100, -10, -10):
        chart += str(i).rjust(3) + '|'
        for percent in spent_percent:
            chart += ' o ' if percent >= i else '   '
        chart += ' \n'

    chart += '    ' + '-' * (len(categories) * 3 + 1)

    names = [c.category for c in categories]
    max_len = max(len(name) for name in names)

    for i in range(max_len):
        chart += '\n     '
        for name in names:
            chart += name[i] + '  ' if i < len(name) else '   '

    return chart



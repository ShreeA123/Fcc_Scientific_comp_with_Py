class Category:

    def __init__(self, name):
        self.name = name
        self.ledger = []

    def deposit(self, amount, description=""):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description=""):
        if self.check_funds(amount):
            self.ledger.append({"amount": -amount, "description": description})
            return True
        return False

    def get_balance(self):
        return sum(item['amount'] for item in self.ledger)

    def transfer(self, amount, other):
        if self.check_funds(amount):
            self.withdraw(amount, f"Transfer to {other.name}")
            other.deposit(amount, f"Transfer from {self.name}")
            return True
        return False

    def check_funds(self, amount):
        return self.get_balance() >= amount

    def __str__(self):
        title = f"{self.name:*^30}\n"
        items = "".join([f"{item['description'][:23]:23}{item['amount']:>7.2f}\n" for item in self.ledger])
        total = f"Total: {self.get_balance():.2f}"
        return title + items + total


def create_spend_chart(categories):
    withdrawals = [sum(-item['amount'] for item in cat.ledger if item['amount'] < 0) for cat in categories]
    total = sum(withdrawals)
    percentages = [int(w / total * 10) * 10 for w in withdrawals]

    chart = "Percentage spent by category\n"

    for i in range(100, -1, -10):
        bars = "".join(["o  " if percentage >= i else "   " for percentage in percentages])
        chart += f"{i:>3}|{bars}\n"

    chart += "    " + "-" * len(categories) * 3 + "-\n"

    names = [cat.name for cat in categories]
    max_length = max(len(name) for name in names)

    for i in range(max_length):
        row = "     " + "".join([f"{names[j][i]}  " if i < len(names[j]) else "   " for j in range(len(names))])
        chart += row + "\n"

    return chart.rstrip() + "  "
